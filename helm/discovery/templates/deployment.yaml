apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "discovery.fullname" . }}
  labels:
    {{- include "discovery.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: 1
  {{- end }}
  selector:
    matchLabels:
      {{- include "discovery.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "discovery.labels" . | nindent 8 }}
	{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "discovery.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.app.httpPort }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.app.grpcPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.app.httpPrefix }}
              port: http
          readinessProbe:
            httpGet:
              path: {{ .Values.app.httpPrefix }}
              port: http
          startupProbe:
            grpc:
              port: {{ .Values.app.grpcPort }}
            initialDelaySeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{ if .Values.security.useGeneratedCert }}
          volumeMounts:
            - mountPath: "/etc/tls"
              name: tls
              readOnly: true
          {{ end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.security.useGeneratedCert }}
      volumes:
        - name: tls
          secret:
            secretName: {{ include "tls.secretName" . }}
      {{ end }}