#@ load("@ytt:data", "data")
#@ load("funcs.lib.yml", "TLSSecretName", "TLSCertName")
#@ load("@ytt:overlay", "overlay")
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name
  labels:
    app.kubernetes.io/name: #@ data.values.name
  annotations: #@ data.values.deploy.annotations
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name:  #@ data.values.name
  template:
    metadata:
      annotations: #@ data.values.deploy.annotations
      labels:
        app.kubernetes.io/name:  #@ data.values.name
    spec:
      imagePullSecrets: #@ data.values.image.pullSecrets
      securityContext: #@ data.values.deploy.securityContext
      containers:
        - name: #@ data.values.name
          securityContext: #@ data.values.deploy.securityContext
          #@ if data.values.image.sha:
          image: #@ data.values.image.repository + "@" + data.values.image.sha
          #@ else:
          image: #@ data.values.image.repository + ":" + data.values.image.tag
          #@ end
          env: #@ data.values.deploy.env
          args:
            - #@ "--repositories"
            - #@ data.values.app.repositories
            - #@ "--grpcPort"
            - #@ str(data.values.app.grpcPort)
            - #@ "--grpcHealthPort"
            - #@ str(data.values.app.grpcHealthPort)
            - #@ "--port"
            - #@ str(data.values.app.httpPort)
          imagePullPolicy: #@ data.values.image.pullPolicy
          ports:
            - name: http
              containerPort: #@ data.values.app.httpPort
              protocol: TCP
            - name: grpc
              containerPort: #@ data.values.app.grpcPort
              protocol: TCP
          livenessProbe:
            httpGet:
              path: #@ data.values.app.httpPrefix
              port: http
          startupProbe:
            grpc:
              port: #@ data.values.app.grpcHealthPort
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: #@ data.values.app.httpPrefix
              port: http
          resources: #@ data.values.deploy.resources
          #@ if data.values.security.certmanager.generateCert:
          volumeMounts:
            - mountPath: "/etc/tls"
              name: tls
              readOnly: true
          #@ end
      nodeSelector: #@ data.values.deploy.nodeSelector
      affinity: #@ data.values.deploy.affinity
      tolerations: #@ data.values.deploy.tolerations
      #@ if data.values.security.certmanager.generateCert:
      volumes:
        - name: tls
          secret:
            secretName: #@ TLSSecretName(data.values.httpproxy.fqdn)
      #@ end
---
#@ if data.values.security.useGeneratedCert and data.values.security.caOnly:
#@overlay/match by=overlay.and_op(overlay.subset({"kind": "Deployment"}), overlay.subset({"metadata": {"name": data.values.name}}))
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: #@ data.values.name
          args:
            #@overlay/append
            - #@ "--caFileLocation"
            - #@ "/etc/tls/ca.crt"
            #@ end
---
#@ if data.values.security.useGeneratedCert and not data.values.security.caOnly:
#@overlay/match by=overlay.and_op(overlay.subset({"kind": "Deployment"}), overlay.subset({"metadata": {"name": data.values.name}}))
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: #@ data.values.name
          args:
            #@overlay/append
            - #@ "--caFileLocation"
            - #@ "/etc/tls/ca.crt"
            - #@ "--certFileLocation"
            - #@ "/etc/tls/tls.crt"
            - #@ "--certKeyFileLocation"
            - #@ "/etc/tls/tls.key"
            #@ end
---


#@ if data.values.app.grpcPort != data.values.app.grpcHealthPort:
#@overlay/match by=overlay.and_op(overlay.subset({"kind": "Deployment"}), overlay.subset({"metadata": {"name": data.values.name}}))
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: #@ data.values.name
          ports:
            #@overlay/append
            - name: grpc-healthcheck
              containerPort: #@ data.values.app.grpcHealthPort
              protocol: TCP
            #@ end
---